my_data<-sample(c(y,z),100)
my_ma<-is.na(my_data)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
bye()
is.na(x)
w<-is.na(x)
x[w]
x
install.packages("swirl")
library(sp)
library(maps)
library(maptools)
install.packages("sp")
install.packages("maps","maptools","leaflet","magritter","RODBC")
library(sp)
library(maps)
library(maptools)
library(leaflet)
library(magrittr)
library(RODBC)
install.packages("maps")
install.packages("maptools")
install.packages("leaflet")
install.packages("magritter")
install.packages("RODBC")
library(sp)
library(maps)
library(maptools)
library(leaflet)
library(magrittr)
library(RODBC)
uid <- readline("User id: ")
password <- readline("Password: ")
connection <- odbcConnect(dsn="whse",uid=uid,pwd=password)
query1 <- readChar("Z:\\Reports\\Jason\\Alumni Relations\\class_1966_home_coordinates.sql", nchars=99999)
query2 <- readChar("Z:\\Reports\\Jason\\Alumni Relations\\class_2016_home_coordinates.sql", nchars=99999)
Class_1966 <- sqlQuery(connection, query1, errors=TRUE)
Class_1966 <- subset(Class_1966, complete.cases(Class_1966$LATITUDE))
Class_2016 <- sqlQuery(connection, query2, errors=TRUE)
Class_2016 <- subset(Class_2016, complete.cases(Class_2016$LATITUDE))
map <- leaflet(data = Class_1966) %>%
addProviderTiles("Esri.WorldStreetMap", options=providerTileOptions()) %>%
# options = providerTileOptions()%>%
# clearBounds() %>%
# setView(-75, 39, zoom = 5) %>% #default zoom for Philly Area
addLegend(position = 'topright', colors = "blue", labels = "Class of 1966", opacity = 1,
title = '') %>%
addCircleMarkers(~ LONGITUDE, ~ LATITUDE,
popup = paste(Class_1966$NAME, " -- ", Class_1966$QUERY_STRING), radius = 5,
clusterOptions = markerClusterOptions(removeOutsideVisibleBounds = FALSE))
map
map <- leaflet() %>%
# Base groups
addTiles(group = "OSM (default)") %>%
addProviderTiles("Esri.WorldStreetMap", group = "World Street Map") %>%
addLegend(position = 'topright', colors = c("red","blue"), labels = c("Class of 2016","Class of 1966"), opacity = 1,
title = '')%>%
addCircleMarkers(data = Class_1966,~ LONGITUDE, ~ LATITUDE, popup = paste(Class_1966$NAME, ", " , Class_1966$AFFILIATION, " -- ", Class_1966$QUERY_STRING),
color = "blue", stroke = F, opacity = 1, group = "1966")%>%
addCircleMarkers(data = Class_2016, ~ LONGITUDE, ~ LATITUDE, popup = paste(Class_2016$NAME, ", " , Class_2016$AFFILIATION,  " -- ", Class_2016$QUERY_STRING),
color = "red", stroke = F, opacity = 1, group = "2016")%>%
# Version using clustering - too busy!
#         addCircleMarkers(data = Class_1966, ~ LONGITUDE, ~ LATITUDE, popup = paste(Class_1966$NAME, " -- ", Class_1966$QUERY_STRING),
#                          color = "red", stroke = T,
#         clusterOptions = markerClusterOptions(), group = "1966")%>%
#         addCircleMarkers(data = Class_2016, ~ LONGITUDE, ~ LATITUDE, popup = paste(Class_2016$NAME, " -- ", Class_2016$QUERY_STRING),
#                          color = "red", stroke = T,
#                          clusterOptions = markerClusterOptions(), group = "2016")%>%
addLayersControl(
baseGroups = c("OSM (default)", "World Street Map"),
overlayGroups = c("2016", "1966"),
options = layersControlOptions(collapsed = FALSE)
)
map
install.packages("KernSmooth")
source('~/.active-rstudio-document')
TRUE && FALSE || 9 >= 4 && 3 < 6
TRUE && FALSE
9 >= 4 && 3 < 6
9 >= 4
3 < 6
!(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79
FALSE && 6 >= 6
FALSE & 6 >= 6
FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5
identical(xor, 'xor')
xor(identical(xor, 'xor'), 7 == 7.0)
xor(!isTRUE(TRUE), 6 > -1)
xor(!!TRUE, !!FALSE)
xor(4 >= 9, 8 != 8.0)
8 != 8.0
4 >= 9
}
telegram("Hello")
telegram("A")
source('~/Coursera/Programming with R/telegram.R')
telegram("Hello")
telegram("Hello")
telegram("Hello")
source('~/Coursera/Programming with R/telegram.R')
telegram("Hello")
mad_libs
source('~/Coursera/Programming with R/mad_libs.R')
mad_libs(Philadelphia,angry,statue)
mad_libs("Philadelphia","angry","statue")
source('~/Coursera/Programming with R/mad_libs.R')
mad_libs("Philadelphia","angry","statue")
source('~/Coursera/Programming with R/bin_op.R')
"Good" %p% "job!"
source('~/Coursera/Programming with R/bin_op.R')
"Good" %p% "job!"
cube(3)
rm(list = ls())
clear()
}
source('~/Coursera/Programming with R/makepower.R')
cube <- make.power(3)
cube
cube(3)
source('~/Coursera/Programming with R/makepower.R')
cube(3)
source('~/Coursera/Programming with R/makepower.R')
cube(3)
source('~/Coursera/Programming with R/makepower.R')
cube(3)
square(3)
cube <- make.power(3)
cube(3)
square <- make.power(2)
square(2)
square(10)
?"environment"
ls(make.power)
ls(environment(make.power))
ls(environment(cube))
?get
get("n",environment(cube))
?"$"
source('~/Coursera/Programming with R/makepower.R')
rm(list = ls())
library(datasets)
data(iris)
?iris
head(iris, 10)
tapply(iris$Sepal.Length, iris$Species, summary)
q()
q()
library(httr)
install.packages("httr")
library(httr)
html2 = GET(url)
url <- "http:scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en"
html2 = GET(url)
library(httr)
R.home()
install.packages("RMySQL")
library(RMySQL)
ucscDb <- dbconnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;");dbDisconnect(ucscDb);
result
install.packages(sqldf)
install.packages("sqldf")
source('C:/Users/jameswa/Downloads/Quiz 2.R')
source('C:/Users/jameswa/Downloads/Quiz 2.R')
install.packages("httpuv")
list(output[[8]]$name, output[[8]]$created_at)
head(output)
head(output,5)
list(output[[7]]$name, output[[7]]$created_at)
list(output[[8]]$name, output[[8]]$created_at)
output$name
summary(output)
str(output)
output[[8]]
source('~/Coursera/Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/Getting and Cleaning Data/Quiz02_01.R')
oauth_app()
oauth_app("Application",
key = "8f9a78c685d0658d5d78",
secret = "e181a43c07ca7f76efcb172200e707f3b028f977")
oauth_app("Application","8f9a78c685d0658d5d78","e181a43c07ca7f76efcb172200e707f3b028f977")
oauth_app(Application,8f9a78c685d0658d5d78,e181a43c07ca7f76efcb172200e707f3b028f977)
source('~/Coursera/Getting and Cleaning Data/Quiz02_01.R')
(rm=list(ls())
(rm=list(ls())
(rm=list(ls())
rm=list(ls())
rm(list=ls())
library(httr)
library(httpuv)
library(jsonlite)
install.packages("jsonlite")
myapp <- oauth_app("Application", "8f9a78c685d0658d5d78", secret = "e181a43c07ca7f76efcb172200e707f3b028f977")
source('~/Coursera/Getting and Cleaning Data/Quiz02_01.R')
install.packages("httpuv")
install.packages("httpuv")
source('~/Coursera/Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
# stop_for_status(req)
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01test.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_02.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_02.R')
library(sqldf)
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_02.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_02.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_02.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_02.R')
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_04.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_05.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_05.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_05.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_05.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_05.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_05.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz02_05.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
source('~/Coursera/03 - Getting and Cleaning Data/Quiz03_01.R')
install.packages(JPEG)
install.packages("JPEG")
install.packages("jpeg")
set.seed(13435)
#X <- X[sample(1:5), ]
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
library(plyr)
library(plyr); library(dplyr)
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L01_subsetting.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
source('~/Coursera/03 - Getting and Cleaning Data/L02_summarizing.R')
quit()
rm(list = ls())
quit
quit()
library(grid)
install.packages("grid")
install.packages("grid")
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
install.packages("installr")
updateR()
# installing/loading the package:
if(!require(installr)) {
install.packages("installr"); require(installr)} #load / install+load installr
# using the package:
updateR() # this will start the updating process of your R installation.  It will check for newer versions, and if one is available, will guide you through the decisions you'd need to make.
install.packages("installr") # install
setInternet2(TRUE)
installr::updateR() # updating R.
install.packages("installr")
updateR()
installing/loading the package: if(!require(installr)) { install.packages("installr"); require(installr)} #load / install+load installr updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
if(!require(installr)) { install.packages("installr"); require(installr)} updateR(F, T, T, F, T, F, T) # install, move, update.package, quit R.
install.packages("installr")
require(installr)
updateR()
setInternet2(TRUE)
install.packages("ggplot")
install.packages("ggplot2")
install.packages("xlsx")
install.packages("knitr")
install.packages("Rmisc")
install.packages("grid")
install.packages("rJava")
install.packages("lubridate")
install.packages("dyplr")
install.packages("dplyr")
system("java -version")
library(xlsx)
require(maps)
require(maptools)
require(leaflet)
require(magrittr)
require(RODBC)
require(rgdal)
require(ggplot2)
require(scales)
require(dplyr)
require(plyr)
require(data.table)
##Set credentials for ODBC connection
uid <- 'advrpt'
# readline("User id: ")
password <- 'R3p0rts_Us3r'
# readline("Password: ")
connection <- odbcConnect(dsn="whse",uid=uid,pwd=password)
##Set up query of Altlas records to match against
query <-
"SELECT DISTINCT
cnst.EMPLID,
cnst.NAME,
cnst.AFFILIATION,
cnst.PRI_CNST_DESCR,
cnst.FIRST_NAME,
cnst.LAST_NAME,
cnst.EMPLOYER,
cnst.STATE,
state.DESCR as STATE_DESCR,
cnst.COUNTRY,
cnst.COUNTRY_LONG
FROM dwgifts.WHSE_CONSTITUENTS cnst,
DWGIFTS.PS_ADDRESSES_MV addr,
dwgifts.PS_STATE_TBL state,
dwgifts.PS_AV_GCLUB_MBR gclub
WHERE
cnst.EMPLID = addr.EMPLID
and addr.STATE = state.STATE
and cnst.EMPLID = gclub.EMPLID
and addr.EFF_STATUS = 'A'
and addr.ADDRESS_TYPE in ('1PRF','BUSN','HOME')
and gclub.GCLUB_CD = 'UNI-HARSN'
and cnst.ID_TYPE = 'P'
and nvl(cnst.DECEASED_FLAG, 'N') <> 'Y'
and cnst.COUNTRY = 'USA'
and state.COUNTRY = 'USA'
order by cnst.STATE";
atlas <<-    sqlQuery(connection, query, stringsAsFactors=FALSE,errors=TRUE, believeNRows=FALSE)
atlas$region <- atlas$STATE_DESCR
harrison_state <- atlas %>% group_by(region) %>% summarise_each(funs(length),EMPLID)
all_states <- map_data("state")
harrison_state$region <- tolower(harrison_state$region)
Total <- merge(all_states, harrison_state, by = "region")
Total <- Total[order(Total$order),]
#Plot Map of US states and counts
p <- ggplot()
p <- p + geom_polygon(data=Total, aes(x=long, y=lat, group = group, fill=Total$EMPLID),colour="white"
) + scale_fill_continuous(low = "thistle2", high = "darkred", guide="colorbar", labels=comma)
P1 <- p + theme_bw()  + labs(fill = "Count of Members"
,title = "Harrison Members by State", x="", y="", labels=comma)
P1 + scale_y_continuous(breaks=c()) + scale_x_continuous(breaks=c()) + theme(panel.border =  element_blank())
#Add Text Labels to States
# library(doBy)
#Find center of each region and append count
#Method 1
# txtVal <- summaryBy(long + lat + EMPLID ~ region, data=Total, FUN=mean, keep.names=T)
#Method 2
# txtVal <- aggregate(cbind(long, lat, EMPLID) ~ region, data=Total, FUN=function(x)mean(range(x)))
#Method 3
statemap <- map('state', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(statemap$names, ":"), function(x) x[1])
state_sp <- map2SpatialPolygons(statemap, IDs=IDs,proj4string=CRS("+proj=longlat +ellps=WGS84"))
# coordinates pulls out the centroid of
#the largest (area) polygon for each state shape
state.label <- data.frame(
state = names(state_sp),
coordinates(state_sp))
state.count <- Total[,c(1,7)] %>% group_by(region)
state.count <- unique(state.count)
setnames(state.count, "region","state")
state.label <- merge(state.count, state.label, by = "state", all=T)
# P1 + geom_text(aes(x=long, y=lat, label=comma(EMPLID)), data=txtVal, col="black", cex=3, fontface = "bold") +
# Method 3
P1 + geom_text(aes(x=X1, y=X2, label=comma(EMPLID)), data=state.label, col="black", cex=3, fontface = "bold") +
theme_bw() +
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())
require(RODBC)
install.packages(c("rodbc", "dplyr", "ggplot2"))
install.packages("RODBC")
require(RODBC)
uid <- 'advrpt'
# readline("User id: ")
password <- 'R3p0rts_Us3r'
# readline("Password: ")
connection <- odbcConnect(dsn="whse",uid=uid,pwd=password)
connection <- odbcConnect(dsn="whse",uid=uid,pwd=password)
##Set up query of Altlas records to match against
query <-
require(RODBC)
uid <- 'advrpt'
# readline("User id: ")
password <- 'R3p0rts_Us3r'
# readline("Password: ")
connection <- odbcConnect(dsn="whse",uid=uid,pwd=password)
require(RODBC)
uid <- 'advrpt'
# readline("User id: ")
password <- 'R3p0rts_Us3r'
# readline("Password: ")
connection <- odbcConnect(dsn="whse",uid=uid,pwd=password)
setwd("S:/Reports/James/Nursing")
setwd("~/Coursera/05 - Reproducible Research/RepData_PeerAssessment1")
